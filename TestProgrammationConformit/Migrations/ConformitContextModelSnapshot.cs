// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestProgrammationConformit.Infrastructures;

namespace TestProgrammationConformit.Migrations
{
    [DbContext(typeof(ConformitContext))]
    partial class ConformitContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {

            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TestProgrammationConformit.Infrastructures.Commentaire", b =>
                {
                    b.Property<int>("CommentaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<int>("EvenementId")
                        .HasColumnType("integer");

                    b.HasKey("CommentaireId");

                    b.HasIndex("EvenementId")
                        .IsUnique();

                    b.ToTable("tbl_commentaire","public");
                });

            modelBuilder.Entity("TestProgrammationConformit.Infrastructures.Evenement", b =>
                {
                    b.Property<int>("EvenementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Personne")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("EvenementId");

                    b.ToTable("tbl_evenement","public");
                });

            modelBuilder.Entity("TestProgrammationConformit.Infrastructures.Commentaire", b =>
                {
                    b.HasOne("TestProgrammationConformit.Infrastructures.Evenement", "Evenement")
                        .WithOne("Commentaire")
                        .HasForeignKey("TestProgrammationConformit.Infrastructures.Commentaire", "EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

        }
    }
}
